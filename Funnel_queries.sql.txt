-- Common Table Expression (CTE) to calculate various metrics at different funnel steps

WITH temp_totals AS (
    SELECT
        ad.platform, 
        COALESCE(s.age_range, 'Unknown') AS age_ranges,
        DATE(ad.download_ts) AS download_date,
        
        COUNT(DISTINCT s.user_id) AS total_users_signed_up,
        COUNT(DISTINCT rr.user_id) AS total_users_ride_requested,
        COUNT(DISTINCT ad.app_download_key) AS total_downloads,
        COUNT(DISTINCT rr.user_id) FILTER(WHERE rr.accept_ts IS NOT NULL) AS total_users_ride_accepted,
        COUNT(DISTINCT rr.user_id) FILTER(WHERE rr.cancel_ts IS NULL) AS total_users_ride_completed,
        COUNT(DISTINCT rr.user_id) FILTER(WHERE tr.charge_status='Approved') AS total_users_ride_paid,
        COUNT(DISTINCT rv.user_id) AS total_users_with_review, 
  
        COUNT(rr.ride_id) AS total_ride_requested,
  		COUNT(rr.ride_id) FILTER(WHERE rr.accept_ts IS NOT NULL) AS total_ride_accepted,
        COUNT(rr.ride_id) FILTER(WHERE rr.cancel_ts IS NULL) AS total_ride_completed,
        COUNT(rr.ride_id) FILTER(WHERE tr.charge_status='Approved') AS total_ride_paid,
        COUNT(rv.ride_id) AS total_ride_reviewed,
    	SUM(tr.purchase_amount_usd) AS revenue
  
  FROM app_downloads ad
    
  LEFT JOIN signups s ON ad.app_download_key = s.session_id
  FULL JOIN ride_requests rr ON s.user_id = rr.user_id
  FULL JOIN transactions tr ON tr.ride_id = rr.ride_id
  FULL JOIN reviews rv ON rv.ride_id = rr.ride_id
   
  GROUP BY ad.platform, age_ranges, download_date
),

-- CTE to represent each funnel step with its corresponding metrics platform, age_ranges, download_date, user_count, ride_count 

temp_steps AS (
    SELECT
        0 AS funnel_step,
        'downloads' AS funnel_name,
        total_downloads AS user_count, platform AS platform, age_ranges, download_date, 0 AS ride_count
    FROM temp_totals

    UNION

    SELECT
        1 AS funnel_step,
        'signups' AS funnel_name,
        total_users_signed_up AS user_count, platform AS platform, age_ranges, download_date, 0 AS ride_count
    FROM temp_totals

    UNION

    SELECT
        2 AS funnel_step,
        'ride_requested' AS funnel_name,
        total_users_ride_requested AS user_count, platform AS platform, age_ranges, download_date, total_ride_requested AS ride_count
    FROM temp_totals

    UNION

    SELECT
        3 AS funnel_step,
        'ride_accepted' AS funnel_name,
        total_users_ride_accepted AS user_count, platform AS platform, age_ranges, download_date, total_ride_accepted AS ride_count
    FROM temp_totals

    UNION

    SELECT
        4 AS funnel_step,
        'ride_completed' AS funnel_name,
        total_users_ride_completed AS user_count, platform AS platform, age_ranges, download_date, total_ride_completed AS ride_count
    FROM temp_totals

    UNION

    SELECT
        5 AS funnel_step,
        'payment' AS funnel_name,
        total_users_ride_paid AS user_count, platform AS platform, age_ranges, download_date, total_ride_paid AS ride_count
    FROM temp_totals

    UNION

    SELECT
        6 AS funnel_step,
        'Reviews' AS funnel_name,
        total_users_with_review AS user_count, platform AS platform, age_ranges, download_date, total_ride_reviewed AS ride_count
    FROM temp_totals
 
    ORDER BY funnel_step
)

-- Select and present the results with metrics for each funnel step
SELECT funnel_step, funnel_name, platform, age_ranges, download_date, user_count, ride_count 
FROM temp_steps 

ORDER BY funnel_step
;




--Query for surge-pricing strategy, showing the highest demand hours during the day
WITH ride_users
     AS (SELECT Date_part('hour', r.request_ts) AS hour_of_request,
		Count(r.ride_id) AS ride_count
FROM
ride_requests r
JOIN signups s ON r.user_id = s.user_id
GROUP BY Date_part('hour', r.request_ts))
SELECT hour_of_request,
ride_users.ride_count AS ride_count
FROM ride_users
ORDER BY hour_of_request;


--rides requested for month
SELECT TO_CHAR(request_ts,'Month') AS month,
       COUNT(*) AS ride_count
FROM ride_requests
GROUP BY EXTRACT(month FROM request_ts),
	TO_CHAR(request_ts,'Month')
ORDER BY EXTRACT(month FROM request_ts);